// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<UserForm /> Should render all elements 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <DashboardView
        alterDeleteModal={[MockFunction]}
        alterDisableComment={[Function]}
        alterDisableLocation={[Function]}
        alterDisableStatus={[Function]}
        alterEditModal={[MockFunction]}
        clearBlobs={[Function]}
        closeCreateModal={[Function]}
        closeDetailsModal={[MockFunction]}
        comment=""
        deleteIncident={[MockFunction]}
        disableComment={true}
        disableFileInput={false}
        disableLocation={true}
        disableStatus={true}
        fetchIncident={[MockFunction]}
        handleChange={[MockFunction]}
        handleCreateIncident={[Function]}
        handleMedia={[Function]}
        hideCreateButton={[Function]}
        imageBlobs={Array []}
        incident={
          Object {
            "comment": "jhdfhfdjk",
            "createdBy": "hjdjhdf",
            "createdOn": "48595940698459540",
            "creator": "jhdfkjdf",
            "id": "djfjfdkl-jeroier",
            "images": Array [
              "hi",
              "helo",
            ],
            "isLoading": false,
            "location": "sdjnkjs",
            "message": "kjfdj",
            "status": "draft",
            "title": "dhjfd",
            "type": "red-flag",
            "updatedOn": "19234895049",
            "videos": Array [
              "fdkfdn",
            ],
          }
        }
        incidentLocation=""
        incidentStatus=""
        incidentType=""
        incidents={
          Array [
            Object {
              "comment": "jhdfhfdjk",
              "createdBy": "hjdjhdf",
              "createdOn": "48595940698459540",
              "creator": "jhdfkjdf",
              "id": "djfjfdkl-jeroier",
              "images": Array [
                "hi",
                "helo",
              ],
              "isLoading": false,
              "location": "sdjnkjs",
              "message": "kjfdj",
              "status": "draft",
              "title": "dhjfd",
              "type": "red-flag",
              "updatedOn": "19234895049",
              "videos": Array [
                "fdkfdn",
              ],
            },
          ]
        }
        isCreateModalOpen={false}
        isDeleteModalOpen={false}
        isDetailsModalOpen={false}
        isEditModalOpen={false}
        isLoading={false}
        location={
          Object {
            "pathname": "/user",
          }
        }
        mapUrl=""
        message=""
        openCreateModal={[Function]}
        openModal={false}
        resetState={[MockFunction]}
        showCreateButton={false}
      >
        <div>
          <div>
            <div>
              <Modal
                ariaHideApp={true}
                bodyOpenClassName="ReactModal__Body--open"
                closeTimeoutMS={0}
                isOpen={false}
                onAfterClose={[Function]}
                onAfterOpen={[Function]}
                onRequestClose={[Function]}
                parentSelector={[Function]}
                portalClassName="ReactModalPortal"
                role="dialog"
                shouldCloseOnEsc={true}
                shouldCloseOnOverlayClick={true}
                shouldFocusAfterRender={true}
                shouldReturnFocusAfterClose={true}
              >
                <Portal
                  containerInfo={
                    <div
                      class="ReactModalPortal"
                    />
                  }
                >
                  <ModalPortal
                    ariaHideApp={true}
                    bodyOpenClassName="ReactModal__Body--open"
                    closeTimeoutMS={0}
                    defaultStyles={
                      Object {
                        "content": Object {
                          "WebkitOverflowScrolling": "touch",
                          "background": "#fff",
                          "border": "1px solid #ccc",
                          "borderRadius": "4px",
                          "bottom": "40px",
                          "left": "40px",
                          "outline": "none",
                          "overflow": "auto",
                          "padding": "20px",
                          "position": "absolute",
                          "right": "40px",
                          "top": "40px",
                        },
                        "overlay": Object {
                          "backgroundColor": "rgba(255, 255, 255, 0.75)",
                          "bottom": 0,
                          "left": 0,
                          "position": "fixed",
                          "right": 0,
                          "top": 0,
                        },
                      }
                    }
                    isOpen={false}
                    onAfterClose={[Function]}
                    onAfterOpen={[Function]}
                    onRequestClose={[Function]}
                    parentSelector={[Function]}
                    portalClassName="ReactModalPortal"
                    role="dialog"
                    shouldCloseOnEsc={true}
                    shouldCloseOnOverlayClick={true}
                    shouldFocusAfterRender={true}
                    shouldReturnFocusAfterClose={true}
                    style={
                      Object {
                        "content": Object {},
                        "overlay": Object {},
                      }
                    }
                  />
                </Portal>
              </Modal>
              <Modal
                ariaHideApp={true}
                bodyOpenClassName="ReactModal__Body--open"
                closeTimeoutMS={0}
                isOpen={false}
                onRequestClose={[MockFunction]}
                parentSelector={[Function]}
                portalClassName="ReactModalPortal"
                role="dialog"
                shouldCloseOnEsc={true}
                shouldCloseOnOverlayClick={true}
                shouldFocusAfterRender={true}
                shouldReturnFocusAfterClose={true}
              >
                <Portal
                  containerInfo={
                    <div
                      class="ReactModalPortal"
                    />
                  }
                >
                  <ModalPortal
                    ariaHideApp={true}
                    bodyOpenClassName="ReactModal__Body--open"
                    closeTimeoutMS={0}
                    defaultStyles={
                      Object {
                        "content": Object {
                          "WebkitOverflowScrolling": "touch",
                          "background": "#fff",
                          "border": "1px solid #ccc",
                          "borderRadius": "4px",
                          "bottom": "40px",
                          "left": "40px",
                          "outline": "none",
                          "overflow": "auto",
                          "padding": "20px",
                          "position": "absolute",
                          "right": "40px",
                          "top": "40px",
                        },
                        "overlay": Object {
                          "backgroundColor": "rgba(255, 255, 255, 0.75)",
                          "bottom": 0,
                          "left": 0,
                          "position": "fixed",
                          "right": 0,
                          "top": 0,
                        },
                      }
                    }
                    isOpen={false}
                    onRequestClose={[MockFunction]}
                    parentSelector={[Function]}
                    portalClassName="ReactModalPortal"
                    role="dialog"
                    shouldCloseOnEsc={true}
                    shouldCloseOnOverlayClick={true}
                    shouldFocusAfterRender={true}
                    shouldReturnFocusAfterClose={true}
                    style={
                      Object {
                        "content": Object {},
                        "overlay": Object {},
                      }
                    }
                  />
                </Portal>
              </Modal>
            </div>
            <p
              id="welcome-text"
            >
              Welcome. View your reports.
            </p>
            <div
              aria-hidden={true}
              id="create-modal"
              onClick={[Function]}
              role="button"
            >
              <img
                alt=""
                src={Object {}}
              />
            </div>
            <Modal
              ariaHideApp={true}
              bodyOpenClassName="ReactModal__Body--open"
              closeTimeoutMS={0}
              isOpen={false}
              onRequestClose={[MockFunction]}
              parentSelector={[Function]}
              portalClassName="ReactModalPortal"
              role="dialog"
              shouldCloseOnEsc={true}
              shouldCloseOnOverlayClick={true}
              shouldFocusAfterRender={true}
              shouldReturnFocusAfterClose={true}
            >
              <Portal
                containerInfo={
                  <div
                    class="ReactModalPortal"
                  />
                }
              >
                <ModalPortal
                  ariaHideApp={true}
                  bodyOpenClassName="ReactModal__Body--open"
                  closeTimeoutMS={0}
                  defaultStyles={
                    Object {
                      "content": Object {
                        "WebkitOverflowScrolling": "touch",
                        "background": "#fff",
                        "border": "1px solid #ccc",
                        "borderRadius": "4px",
                        "bottom": "40px",
                        "left": "40px",
                        "outline": "none",
                        "overflow": "auto",
                        "padding": "20px",
                        "position": "absolute",
                        "right": "40px",
                        "top": "40px",
                      },
                      "overlay": Object {
                        "backgroundColor": "rgba(255, 255, 255, 0.75)",
                        "bottom": 0,
                        "left": 0,
                        "position": "fixed",
                        "right": 0,
                        "top": 0,
                      },
                    }
                  }
                  isOpen={false}
                  onRequestClose={[MockFunction]}
                  parentSelector={[Function]}
                  portalClassName="ReactModalPortal"
                  role="dialog"
                  shouldCloseOnEsc={true}
                  shouldCloseOnOverlayClick={true}
                  shouldFocusAfterRender={true}
                  shouldReturnFocusAfterClose={true}
                  style={
                    Object {
                      "content": Object {},
                      "overlay": Object {},
                    }
                  }
                />
              </Portal>
            </Modal>
            <Modal
              ariaHideApp={true}
              bodyOpenClassName="ReactModal__Body--open"
              closeTimeoutMS={0}
              isOpen={false}
              onRequestClose={[MockFunction]}
              parentSelector={[Function]}
              portalClassName="ReactModalPortal"
              role="dialog"
              shouldCloseOnEsc={true}
              shouldCloseOnOverlayClick={true}
              shouldFocusAfterRender={true}
              shouldReturnFocusAfterClose={true}
            >
              <Portal
                containerInfo={
                  <div
                    class="ReactModalPortal"
                  />
                }
              >
                <ModalPortal
                  ariaHideApp={true}
                  bodyOpenClassName="ReactModal__Body--open"
                  closeTimeoutMS={0}
                  defaultStyles={
                    Object {
                      "content": Object {
                        "WebkitOverflowScrolling": "touch",
                        "background": "#fff",
                        "border": "1px solid #ccc",
                        "borderRadius": "4px",
                        "bottom": "40px",
                        "left": "40px",
                        "outline": "none",
                        "overflow": "auto",
                        "padding": "20px",
                        "position": "absolute",
                        "right": "40px",
                        "top": "40px",
                      },
                      "overlay": Object {
                        "backgroundColor": "rgba(255, 255, 255, 0.75)",
                        "bottom": 0,
                        "left": 0,
                        "position": "fixed",
                        "right": 0,
                        "top": 0,
                      },
                    }
                  }
                  isOpen={false}
                  onRequestClose={[MockFunction]}
                  parentSelector={[Function]}
                  portalClassName="ReactModalPortal"
                  role="dialog"
                  shouldCloseOnEsc={true}
                  shouldCloseOnOverlayClick={true}
                  shouldFocusAfterRender={true}
                  shouldReturnFocusAfterClose={true}
                  style={
                    Object {
                      "content": Object {},
                      "overlay": Object {},
                    }
                  }
                />
              </Portal>
            </Modal>
            <div>
              <div>
                <FilterFeature>
                  <div>
                    <label
                      htmlFor="select report"
                    >
                      Sort reported incidents by status
                    </label>
                    <select
                      id="sort-report"
                      name="select report"
                    >
                      <option
                        value="all"
                      >
                        All
                      </option>
                      <option
                        value="red-flag"
                      >
                        Red flags
                      </option>
                      <option
                        value="intervention"
                      >
                        Intervention
                      </option>
                      <option
                        value="draft"
                      >
                        Draft
                      </option>
                      <option
                        value="rejected"
                      >
                        Rejected
                      </option>
                      <option
                        value="resolved"
                      >
                        Resolved
                      </option>
                      <option
                        value="under-investigation"
                      >
                        Under Investigation
                      </option>
                    </select>
                  </div>
                </FilterFeature>
                <SearchFeature>
                  <div>
                    <label
                      htmlFor="filter list"
                    >
                      Search Incident
                    </label>
                    <select
                      id="filter-options"
                      name="filter list"
                    >
                      <option
                        value=""
                      >
                        Select option
                      </option>
                      <option
                        value="id"
                      >
                        Incident ID
                      </option>
                      <option
                        value="location"
                      >
                        Location
                      </option>
                    </select>
                    <input
                      id="filter-value"
                      name=""
                      placeholder="Please enter your search term here"
                      type="text"
                    />
                    <div>
                      <button>
                        Search
                      </button>
                      <button>
                        Clear Search
                      </button>
                    </div>
                  </div>
                </SearchFeature>
              </div>
              <div
                className="recently-created"
              >
                <div
                  id="all-reports"
                >
                  <div
                    id="incidents-view"
                  >
                    <SingleReport
                      alterDeleteModal={[MockFunction]}
                      alterEditModal={[MockFunction]}
                      createdOn="48595940698459540"
                      fetchIncident={[MockFunction]}
                      id="djfjfdkl-jeroier"
                      incidentLocation="sdjnkjs"
                      key="djfjfdkl-jeroier"
                      location={
                        Object {
                          "pathname": "/user",
                        }
                      }
                      status="draft"
                      title="dhjfd"
                      type="red-flag"
                    >
                      <div>
                        <div>
                          <div>
                            <div>
                              <FontAwesomeIcon
                                border={false}
                                className=""
                                fixedWidth={false}
                                flip={null}
                                icon="check-circle"
                                inverse={false}
                                listItem={false}
                                mask={null}
                                pull={null}
                                pulse={false}
                                rotation={null}
                                size={null}
                                spin={false}
                                symbol={false}
                                title=""
                                transform={null}
                              />
                              <h4>
                                Title: 
                              </h4>
                            </div>
                            <p>
                              dhjfd
                            </p>
                          </div>
                          <div>
                            <div>
                              <FontAwesomeIcon
                                border={false}
                                className=""
                                fixedWidth={false}
                                flip={null}
                                icon="check-circle"
                                inverse={false}
                                listItem={false}
                                mask={null}
                                pull={null}
                                pulse={false}
                                rotation={null}
                                size={null}
                                spin={false}
                                symbol={false}
                                title=""
                                transform={null}
                              />
                              <h4>
                                Type: 
                              </h4>
                            </div>
                            <p>
                              red-flag
                            </p>
                          </div>
                          <div>
                            <div>
                              <FontAwesomeIcon
                                border={false}
                                className=""
                                fixedWidth={false}
                                flip={null}
                                icon="check-circle"
                                inverse={false}
                                listItem={false}
                                mask={null}
                                pull={null}
                                pulse={false}
                                rotation={null}
                                size={null}
                                spin={false}
                                symbol={false}
                                title=""
                                transform={null}
                              />
                              <h4>
                                Date: 
                              </h4>
                            </div>
                            <p
                              id="incident-date"
                            >
                              Invalid date
                            </p>
                          </div>
                          <div>
                            <div>
                              <FontAwesomeIcon
                                border={false}
                                className=""
                                fixedWidth={false}
                                flip={null}
                                icon="check-circle"
                                inverse={false}
                                listItem={false}
                                mask={null}
                                pull={null}
                                pulse={false}
                                rotation={null}
                                size={null}
                                spin={false}
                                symbol={false}
                                title=""
                                transform={null}
                              />
                              <h4>
                                Status: 
                              </h4>
                            </div>
                            <p>
                              draft
                            </p>
                          </div>
                          <div>
                            <div>
                              <FontAwesomeIcon
                                border={false}
                                className=""
                                fixedWidth={false}
                                flip={null}
                                icon="check-circle"
                                inverse={false}
                                listItem={false}
                                mask={null}
                                pull={null}
                                pulse={false}
                                rotation={null}
                                size={null}
                                spin={false}
                                symbol={false}
                                title=""
                                transform={null}
                              />
                              <h4>
                                Location: 
                              </h4>
                            </div>
                            <p>
                              sdjnkjs
                            </p>
                          </div>
                          <div>
                            <div>
                              <button
                                id="view_btn"
                                onClick={[Function]}
                              >
                                Details
                              </button>
                              <button
                                id="edit_btn"
                                onClick={[Function]}
                              >
                                Edit
                              </button>
                              <button
                                id="delete_btn"
                                onClick={[Function]}
                              >
                                Delete
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </SingleReport>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </DashboardView>
    </Router>
  </BrowserRouter>
</Provider>
`;
